{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","active","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","TileLayer","url","attribution","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callack","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","FormControl","Select","variant","onChange","event","countryCode","target","console","log","MenuItem","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.90df1357.chunk.js","sourcesContent":["import React from 'react'\nimport \"./InfoBox.css\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\"\n\nfunction InfoBox({ title, cases, active, total, ...props }) {\n    return (\n        <Card onClick={props.onClick} className={`infoBox ${active && 'infoBox--selected'}`}>\n            <CardContent>\n                <Typography className=\"infoBox__title\" color = \"textSecondary\">\n                    {title}\n                </Typography>\n                <h2 className=\"infoBox__cases\">{cases}</h2>\n                <Typography className=\"infoBox__total\">\n                    {total} Total\n                </Typography>\n            </CardContent>\n        </Card>\n    )\n}\n\nexport default InfoBox","import React from \"react\";\nimport numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\";\n\nconst casesTypeColors = {\n  cases: {\n    hex: \"#CC1034\",\n    rgb: \"rgb(204, 16, 52)\",\n    half_op: \"rgba(204, 16, 52, 0.5)\",\n    multiplier: 600,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    rgb: \"rgb(125, 215, 29)\",\n    half_op: \"rgba(125, 215, 29, 0.5)\",\n    multiplier: 600,\n  },\n  deaths: {\n    hex: \"#fb4443\",\n    rgb: \"rgb(251, 68, 67)\",\n    half_op: \"rgba(251, 68, 67, 0.5)\",\n    multiplier: 2000,\n  },\n};\n\nexport const sortData = (data) => {\n  let sortedData = [...data];\n  sortedData.sort((a, b) => {\n    if (a.cases > b.cases) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n  return sortedData;\n};\n\nexport const prettyPrintStat = (stat) =>\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\nexport const showDataOnMap = (data, casesType) =>\n  data.map((country) => (\n    <Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      fillOpacity={0.4}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n    >\n      <Popup>\n        <div className=\"info-container\">\n          <div\n            className=\"info-flag\"\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n          ></div>\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confirmed\">\n            Cases: {numeral(country.cases).format(\"0,0\")}\n          </div>\n          <div className=\"info-recovered\">\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\n          </div>\n          <div className=\"info-deaths\">\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));","import React from 'react';\nimport './Map.css';\nimport { MapContainer as LeafletMap, TileLayer } from \"react-leaflet\";\nimport { showDataOnMap } from './util';\n\nfunction Map({countries, casesType, center, zoom}) {\n    return (\n        <div className=\"map\">\n            <LeafletMap center={center} zoom={zoom}>\n                <TileLayer\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                />\n                {showDataOnMap(countries, casesType)}\n            </LeafletMap>\n        </div>\n    );\n}\n\nexport default Map","import React from 'react'\nimport './Table.css';\nimport numeral from \"numeral\";\n\nfunction Table({ countries }) {\n    return (\n        <div className=\"table\">\n            {countries.map(({country, cases}) => (\n                <tr>\n                    <td>{country}</td>\n                    <td>\n                        <strong>{numeral(cases).format(\"0,0\")}</strong>\n                    </td>\n                </tr>\n            ))}\n        </div>\n    )\n}\n\nexport default Table","import React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport numeral from \"numeral\";\n\nconst options = {\n    legend: {\n        display: false,\n    },\n    elements: {\n        point: {\n            radius: 0\n        },\n    },\n    maintainAspectRatio: false,\n    tooltips: {\n        mode: \"index\",\n        intersect: false,\n        callbacks: {\n            label: function (tooltipItem, data) {\n                return numeral(tooltipItem.value).format(\"+0,0\");\n            },\n        },\n    },\n    scales: {\n        xAxes: [\n            {\n                type: \"time\",\n                time: {\n                    format: \"MM/DD/YY\",\n                    tooltipFormat: \"ll\"\n                },\n            },\n        ],\n        yAxes: [\n            {\n                gridLines: {\n                    display: false,\n                },\n                ticks: {\n                    callack: function (value, index, values) {\n                        return numeral(value).format(\"0a\");\n                    },\n                },\n            },\n        ],\n    },\n};\n\nconst buildChartData = (data, casesType) => {\n    let chartData = [];\n    let lastDataPoint;\n    for (let date in data.cases){\n        if (lastDataPoint) {\n            let newDataPoint = {\n                x: date,\n                y: data[casesType][date] - lastDataPoint\n            };\n            chartData.push(newDataPoint);\n        }\n        lastDataPoint = data[casesType][date];\n    };\n    return chartData;\n};\n\nfunction LineGraph({ casesType  }) {\n    const [data, setData] = useState({});\n\n    useEffect(() => {\n        const fetchData = async () => {\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n            .then(response => response.json())\n            .then(data => {\n                const chartData = buildChartData(data, \"cases\")\n                setData(chartData);\n            });\n        };\n\n        fetchData();\n        \n    }, [casesType]);\n\n    return (\n        <div>\n            {data?.length > 0 && (\n                <Line \n                    data={{\n                        datasets: [\n                            {\n                                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                                borderColor: \"#CC1034\",\n                                data: data,\n                            },\n                        ],\n                    }}\n                    options = {options}\n                />\n            )}\n        </div>\n    );\n}\n\nexport default LineGraph;\n","import React, { useEffect, useState } from \"react\";\nimport { MenuItem, FormControl, Select, Card, CardContent} from \"@material-ui/core\";\nimport InfoBox from './InfoBox';\nimport MapContainer from \"./Map\";\nimport './App.css';\nimport Table from \"./Table\";\nimport { sortData, prettyPrintStat } from \"./util\";\nimport LineGraph from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\n\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34, lng: -40 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const[casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(() => {\n    fetch('https://disease.sh/v3/covid-19/all')\n    .then(response => response.json())\n    .then(data => {\n      setCountryInfo(data);\n    });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch (\"https://disease.sh/v3/covid-19/countries\")\n      .then((response) => response.json())\n      .then((data) => {\n        const countries = data.map((country) => (\n          {\n            name: country.country,\n            value: country.countryInfo.iso2\n          }));\n          let sortedData = sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n      });\n    };\n\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = (event) => {\n    const countryCode = event.target.value;\n\n    const url = countryCode === \"worldwide\" \n    ? 'https://disease.sh/v3/covid-19/all' \n    : `https://disease.sh/v3/covid-19/countries/${countryCode}`\n\n fetch(url)\n    .then(response => response.json())\n    .then((data) => {\n      setCountry(countryCode);\n      setCountryInfo(data);\n      if (countryCode != \"worldwide\") {\n        console.log(data.countryInfo.lat + \" \" + data.countryInfo.long);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n      }\n      setMapZoom(4);\n    });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className = \"app__left\">\n        <div className=\"app__header\">\n        <h1> COVID-19 Tracker </h1>\n          <FormControl className=\"app__dropdown\">\n            <Select variant = \"outlined\" onChange={onCountryChange} value = {country} >\n            <MenuItem value = \"worldwide\">Worldwide</MenuItem>\n              { countries.map(country => (\n                  <MenuItem value = {country.value}>{country.name}</MenuItem>\n                ))}\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className=\"app__stats\">\n          <InfoBox \n          active={casesType === \"cases\"}\n          onClick={e => setCasesType('cases')}\n          title=\"Coronavirus Cases\" \n          cases={prettyPrintStat(countryInfo.todayCases)} \n          total={prettyPrintStat(countryInfo.cases)}\n          />\n          <InfoBox\n          active={casesType === \"recovered\"}\n          onClick={e => setCasesType('recovered')}\n          title=\"Recovered\" \n          cases={prettyPrintStat(countryInfo.todayRecovered)} \n          total={prettyPrintStat(countryInfo.recovered)}\n          />\n          <InfoBox\n          active={casesType === \"deaths\"}\n          onClick={e => setCasesType('deaths')}\n          title=\"Deaths\" \n          cases={prettyPrintStat(countryInfo.todayDeaths)} \n          total={prettyPrintStat(countryInfo.deaths)}\n          />\n        </div>\n\n        <MapContainer casesType={casesType} countries={mapCountries} center={mapCenter} zoom={mapZoom}/>\n        </div>\n          <Card className=\"app__right\">\n            <CardContent>\n              <h3>Live Cases by Country</h3>\n              <Table countries={tableData} />\n              <h3>Worldwide New {casesType}</h3>\n              <LineGraph casesType={casesType}/>\n            </CardContent>\n          </Card>\n          \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}